<Window x:Class="MovieEditor.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MovieEditor"
        xmlns:ui="http://schemas.modernwpf.com/2019"
        xmlns:behavior="clr-namespace:MovieEditor.Views.Behavior"
        mc:Ignorable="d"
        Title="MainWindow" Height="800" Width="800"
        ui:WindowHelper.UseModernWindowStyle="True">

    <ui:SimpleStackPanel Margin="12" Spacing="24">
		<ui:SimpleStackPanel Orientation="Horizontal">
            <Button Margin="6" Content="テスト" Command="{Binding Test2Command}" />
			<Button Margin="6" Content="ファイルを追加" Command="{Binding ReferSourceFilesCommand}" />
			<Button Margin="6" Content="クリア" Command="{Binding ClearSourceFilesCommand}" />
		</ui:SimpleStackPanel>
		<ListView Name="SourceList" Margin="10" Height="300" Width="750"
            ScrollViewer.VerticalScrollBarVisibility="Visible"
            behavior:ListViewDragBehavior.DragOverEffect="True"
            behavior:ListViewHorizontalScrollBehavior.ShiftHorizontalScroll="True"
            Drop="SourceList_OnDrop"
            ItemsSource="{Binding MovieInfoList}" >
			<ListView.ItemContainerStyle>
				<!--各項目をダブルクリックしたときのイベントハンドラを設定したい
				    ただし、Styleを定義するとuiデザインが一部デフォルトに上書きされてしまうため、
					BasedOnでModernWpfのDefaultListViewItemStyleを参照する-->
				<Style TargetType="ListViewItem" BasedOn="{StaticResource DefaultListViewItemStyle}" >
					<EventSetter Event="MouseDoubleClick" Handler="SourceList_OnItemDoubleClicked" />
				</Style>
			</ListView.ItemContainerStyle>
			<ListView.View>
                <GridView>
                    <GridViewColumn Width="50">
						<!--GridViewColumn.Headerから直接CheckBoxを指定するとイベントハンドラの指定ができないため
						    テンプレートを作ることでチェック時のイベントを取り出せるようにする-->
                        <GridViewColumn.HeaderTemplate>
                            <DataTemplate>
								<!--MainWindowViewModelのプロパティIsAllCheckedをバインドさせたいが、
								    ItemsSourceにMovieInfoListをバインドさせているため、
									そのままIsAllCheckedをバインドすると、MovieInfoListの要素からIsAllCheckedプロパティを探してしまう
									MainWindowViewModelからIsAllCheckedを参照するようにする-->
                                <CheckBox
                                    IsChecked="{Binding DataContext.IsAllChecked, RelativeSource={RelativeSource AncestorType=ListView}}"
                                    Checked="SourceListHeader0_OnChecked" 
                                    Unchecked="SourceListHeader0_OnUnchecked" />
                            </DataTemplate>
                        </GridViewColumn.HeaderTemplate>
                    </GridViewColumn>
                    <GridViewColumn Width="250" Header="ファイル名" />
					<GridViewColumn Width="80" Header="サイズ"/>
					<GridViewColumn Width="100" Header="再生時間" />
					<GridViewColumn Width="150" Header="解像度(W : H)" />
					<GridViewColumn Width="80" Header="フレーム率" />
                    <GridViewColumn Width="100" Header="ビットレート" />
					<GridViewColumn Width="100" Header="動画コーデック" />
                </GridView>				
			</ListView.View>
			<!--上でDefaultListViewItemStyleをBasedOnするとGridViewColumnの中でDisplayMemberBindingにより各要素をBindingすることができない。
			    Templateを定義して、ItemTemplateとして反映させる-->
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="50" />
                            <ColumnDefinition Width="250" />
                            <ColumnDefinition Width="80" />
                            <ColumnDefinition Width="100" />
                            <ColumnDefinition Width="150" />
                            <ColumnDefinition Width="80" />
                            <ColumnDefinition Width="100" />
                            <ColumnDefinition Width="100" />
                        </Grid.ColumnDefinitions>
                        <CheckBox Grid.Column="0" IsChecked="{Binding IsChecked}" />
                        <TextBlock Grid.Column="1" Text="{Binding Info.FileName}" />
                        <TextBlock Grid.Column="2" Text="{Binding Info.FileSizeString}" />
                        <TextBlock Grid.Column="3" Text="{Binding Info.FormattedDuration}" />
                        <TextBlock Grid.Column="4" Text="{Binding Info.ScaleString}" />
                        <TextBlock Grid.Column="5" Text="{Binding Info.FrameRateString}" />
                        <TextBlock Grid.Column="6" Text="{Binding Info.VideoBitRateString}" />
                        <TextBlock Grid.Column="7" Text="{Binding Info.VideoCodec}" />
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
		</ListView>
        <TabControl SelectedIndex="{Binding ProcessMode}">
            <TabItem Header="動画圧縮">
                <ui:SimpleStackPanel Orientation="Horizontal" Spacing="10">
                    <ui:SimpleStackPanel Orientation="Horizontal">
                        <Label Content="Width :" VerticalContentAlignment="Center" Margin="8" />
                        <TextBox
                            Text="{Binding OutputWidth}"
                            HorizontalContentAlignment="Right"
                            Height="20" Width="80"/>
                    </ui:SimpleStackPanel>
                    <ui:SimpleStackPanel Orientation="Horizontal">
                        <Label Content="Height :" VerticalContentAlignment="Center" Margin="8" />
                        <TextBox
                            Text="{Binding OutputHeight}"
                            HorizontalContentAlignment="Right"
                            Height="20" Width="80"/>
                    </ui:SimpleStackPanel>
                    <ui:SimpleStackPanel Orientation="Horizontal">
                        <Label Content="フレーム率 :" VerticalContentAlignment="Center" Margin="8" />
                        <TextBox
                            Text="{Binding OutputFrameRate}"
                            HorizontalContentAlignment="Right"
                            Height="20" Width="60"/>
                    </ui:SimpleStackPanel>
                    <ui:SimpleStackPanel Orientation="Horizontal">
                        <Label Content="動画コーデック :" VerticalContentAlignment="Center" Margin="8" />
                        <TextBox
                            Text="{Binding OutputCodec}"
                            Height="20" Width="80"/>
                    </ui:SimpleStackPanel>
                    <ui:SimpleStackPanel Orientation="Horizontal">
                        <Label Content="音声削除 :" VerticalContentAlignment="Center" Margin="8" />
                        <CheckBox IsChecked="{Binding IsAudioEraced}" />
                    </ui:SimpleStackPanel>
                </ui:SimpleStackPanel>
            </TabItem>
            <TabItem Header="音声抽出">
                <Button />
            </TabItem>
        </TabControl>
        <ui:SimpleStackPanel Orientation="Horizontal" Spacing="20">
            <ui:SimpleStackPanel Orientation="Horizontal">
                <Label Content="出力先 :" VerticalContentAlignment="Center" />
                <TextBox 
                    Text="{Binding OutDirectory}"
                    behavior:TextBoxDragBehavior.DragOverEffect="True"
                    Drop="OutDirectory_OnDrop"
                    Margin="10" Width="350" />
                <Button 
                    Command="{Binding ReferOutDirectoryCommand}"
                    Content="参照" />
            </ui:SimpleStackPanel>
            <ui:SimpleStackPanel Orientation="Horizontal">
                <Label Content="出力タグ :" VerticalContentAlignment="Center" Margin="8" />
                <TextBox
                    Text="{Binding OutputNameTag}"
                    Height="30" Width="100" />
            </ui:SimpleStackPanel>
            <Button Content="実行" Width="80" HorizontalContentAlignment="Center"
                Style="{StaticResource AccentButtonStyle}"
                Command="{Binding RunCommand}"
                Foreground="Black" FontWeight="Bold" FontSize="18" FontFamily="Arial" />
        </ui:SimpleStackPanel>
        <TextBox 
            Text="{Binding LogHistory}"
            IsReadOnly="True"
            TextWrapping="Wrap" 
            VerticalScrollBarVisibility="Visible"
            behavior:TextBoxBehavior.AutoScrollToEnd="True"
            Height="150" Width="750" />
    </ui:SimpleStackPanel>
</Window>
